################################################################################
# Autogenerated by build_tools/bazel_to_cmake/bazel_to_cmake.py from           #
# compiler/src/iree/compiler/API2/BUILD                                        #
#                                                                              #
# Use iree_cmake_extra_content from iree/build_defs.oss.bzl to add arbitrary   #
# CMake-only content.                                                          #
#                                                                              #
# To disable autogeneration for this file entirely, delete this header.        #
################################################################################

iree_add_all_subdirs()

iree_cc_library(
  NAME
    EmbedHeaders
  HDRS
    "Embed.h"
  DEPS

  PUBLIC
)

iree_cc_library(
  NAME
    Headers
  HDRS
    "Embed.h"
    "MLIRInterop.h"
    "ToolEntryPoints.h"
  DEPS
    IREELLVMIncludeSetup
  PUBLIC
)

iree_cc_library(
  NAME
    StaticImpl
  DEPS
    IREEDialectsCAPI
    MLIRCAPIDebug
    MLIRCAPIIR
    MLIRCAPIInterfaces
    MLIRCAPILinalg
    MLIRCAPIPDL
    MLIRCAPITransformDialect
    iree::compiler::API2::Internal::Embed
    iree::compiler::API2::Internal::IREECompileToolEntryPoint
    iree::compiler::API2::Internal::IREEMLIRLSPServerToolEntryPoint
    iree::compiler::API2::Internal::IREEOptToolEntryPoint
    iree::compiler::API2::Internal::LLDToolEntryPoint
    iree::compiler::API2::Internal::MLIRInterop
  PUBLIC
)

### BAZEL_TO_CMAKE_PRESERVES_ALL_CONTENT_BELOW_THIS_LINE ###

iree_cc_library(
  SHARED
  NAME
    SharedImpl
  WINDOWS_DEF_FILE
    # On Windows, include the generated def file.
    ${CMAKE_CURRENT_SOURCE_DIR}/api_exports.def
  SRCS
    api_exports.c
  LINKOPTS
    # Linux uses a linker script.
    $<$<PLATFORM_ID:Linux>:-Wl,--version-script=${CMAKE_CURRENT_SOURCE_DIR}/api_exports.ld>
    # MacOS uses a symbol list. Note that this option is only accepted
    # with a single dash.
    $<$<PLATFORM_ID:Darwin>:-Wl,-exported_symbols_list,${CMAKE_CURRENT_SOURCE_DIR}/api_exports.macos.lst>
)

# If not using sanitizers, ask linkers to error on undefined symbols.
# For shared libraries, using sanitizers implies undefined symbols on Unix-like.
if(NOT IREE_ENABLE_ASAN
    AND NOT IREE_ENABLE_MSAN
    AND NOT IREE_ENABLE_TSAN
    AND NOT IREE_ENABLE_UBSAN)
  target_link_options(iree_compiler_API2_SharedImpl PRIVATE
    $<$<PLATFORM_ID:Linux>:-Wl,--no-undefined>
    $<$<PLATFORM_ID:Darwin>:-Wl,-undefined,error>
  )
endif()

# DANGER: iree_cc_library links its deps with PUBLIC scope, which causes
# usage requirements to propagate from dependents to users of the shared
# library. The shared library is intended to be used as an isolated boundary
# for C consumers. Therefore, we depend on the backing static library with
# PRIVATE scope explicitly here vs using a DEPS above. This kind of "boundary
# shared library" seems to be the only place this happens, so we special
# case vs generalizing.
target_link_libraries(
  iree_compiler_API2_SharedImpl
  PRIVATE
    iree_compiler_API2_StaticImpl
)

set_target_properties(
  iree_compiler_API2_SharedImpl
  PROPERTIES
    OUTPUT_NAME "IREECompiler"
    VERSION "0"
    SOVERSION "0"

    LIBRARY_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/lib"
    # On Windows, DLLs go to the runtime directory and import
    # libraries go to the lib directory.
    # TODO: We should really be dumping binaries into bin/ not
    # tools/. This must line up with binaries built this way because
    # DLLs must be in the same directory as the binary.
    # See: https://github.com/openxla/iree/issues/11297
    RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/tools"
    ARCHIVE_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/lib"
)

install(
  TARGETS iree_compiler_API2_SharedImpl
  COMPONENT Compiler
)

# The bazel side uses a "Impl" library alias to generically represent
# static or shared. Provide a corresponding one here.

if(IREE_LINK_COMPILER_SHARED_LIBRARY)
iree_cc_library(
  NAME
    Impl
  DEPS
    ::SharedImpl
)
else()
iree_cc_library(
  NAME
    Impl
  DEPS
    ::StaticImpl
)
endif()  # IREE_LINK_COMPILER_SHARED_LIBRARY
